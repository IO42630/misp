package actor;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;

import core.ConnectionHelper;
import core.MockSet;
import core.Ride;
import core.State;
import exchange.ExchangeMock;

public class UserMock extends ActorRunnable {

    int requestCount = 0;

    public UserMock(MockSet mockSet){
        super(mockSet);
    }

    @Override
    public void run() {
        while (true){
            try {
                Thread.sleep(1000);
                sendGetRequest();
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }

        }
    }

    @Override
    void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {

    }

    @Override
    void doPost(HttpServletRequest request, HttpServletResponse response) {

    }



    /**
     * # send GET (Request)
     * Generated by Loop
     */
    void sendGetRequest() throws IOException, InterruptedException {

        // Mock Exchange
        ExchangeMock exchange = new ExchangeMock();

        exchange.request.setMethod("GET");
        exchange.request.setContentType("application/json");
        String requestBody = "REQUEST-"+requestCount++;
        String jsonString = "{\"request\":\""+requestBody+ "\"}";
        exchange.request.setContent(jsonString.getBytes());

        synchronized (exchange){
            // Mock GET (Request)
            exchange.notify();
            mockSet.bridgeMock.doGet(exchange.request,exchange.response);
            exchange.wait();

            // handle OK (Data)
            String data = exchange.response.getContentAsString();
            System.out.println(data + " of REQUEST-"+requestCount);

        }
    }

}
