package core;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.HashMap;
import java.util.Map;




public class ClientServlet extends HttpServlet {

    protected static final String MISP_BRIDGE_URL = "http://localhost:9090/mispbridge/core";
    protected static final String APP_URL = "http://localhost:9090";

    public static final int AVAILABLE_RIDES_OVERHEAD_TRIGGER = 16;
    public static final int AVAILABLE_RIDES_OVERHEAD = 32;


    public final Map<Long, Ride> rideMap = new HashMap<>();
    protected RideMapHelper mapHelper = new RideMapHelper(rideMap);

    public ClientServlet() {

        // Thread : while AvailableRides < 256 , add Ride to AvailableRides , send POST (Ride) [DONE]
        Thread postRideThread = new Thread(new PostRideRunnable(this));
        postRideThread.setName("postRideThread");
        postRideThread.start();
    }


    /**
     * # send POST (Ride)
     * Generated by Loop
     */
    void sendPostRide(Ride ride) throws IOException, ServletException, InterruptedException {

        HttpURLConnection connection = ConnectionHelper.make("POST", MISP_BRIDGE_URL);

        // send POST (Ride)

        rideMap.put(ride.getID(), ride.setState(State.AVAILABLE));
        connection.setDoOutput(true);
        DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
        outputStream.writeBytes(ride.json());
        outputStream.flush();
        outputStream.close();

        // handle OK (Ride)
        // remove Ride from AvailableRides
        // add Ride to ReservedRides
        if (connection.getResponseCode() == 200) {
            Ride parsedRide = ConnectionHelper.parseRide(connection);
            if (parsedRide.equals(ride)) {
                ride.setState(State.BOOKED);
            }
        }
    }



    /**
     * # send GET (Request) to App
     */
    void sendGetRequest(Ride ride) throws IOException, ServletException, InterruptedException {

        // send FOO
        // TODO make sure as many as possible tyes of requests can be forwarded.

        // handle OK (Data)
        // remove Ride from PendingRequests
        // add Ride to PendingData
        // send GET (Ride)(Data)
        String data = "DATA";
        ride.setData(data);
        ride.setState(State.LOADED);
        sendGetRideRequestData(ride);

    }


    /**
     * # send GET (Ride)(Request)(Data)
     */
    void sendGetRideRequestData(Ride oldRide) throws IOException, ServletException, InterruptedException {

        HttpURLConnection connection = ConnectionHelper.make("GET", MISP_BRIDGE_URL);

        // send GET (Ride)(Request)(Data)
        connection.setDoOutput(true);
        DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
        outputStream.writeBytes(oldRide.json());
        outputStream.flush();
        outputStream.close();

        // handle OK (RIDE)
        if (connection.getResponseCode() == 200) {
            Ride shellIdRide = ConnectionHelper.parseRide(connection);
            if (shellIdRide.getID() != null) {
                rideMap.remove(oldRide.getID());
            }
        }
    }


}


/**
 * While AvailableRides < 256 ,
 * add Ride to AvailableRides ,
 * send POST (Ride).
 */
class PostRideRunnable implements Runnable {

    ClientServlet clientServlet;

    public PostRideRunnable(ClientServlet clientServlet) {
        this.clientServlet = clientServlet;
    }

    @Override
    public void run() {
        while (true) {

            long availableRides = 0L;
            for (Map.Entry<Long,Ride> entry : clientServlet.rideMap.entrySet()){
                if (entry.getValue().getState() == State.AVAILABLE){
                    availableRides++;
                }
            }



            if (availableRides< ClientServlet.AVAILABLE_RIDES_OVERHEAD_TRIGGER) {
                for (int i=0; i<ClientServlet.AVAILABLE_RIDES_OVERHEAD;i++) {
                    try {clientServlet.sendPostRide(new Ride());} catch (IOException | ServletException | InterruptedException e) { e.printStackTrace(); }
                }
            }
        }
    }
}


